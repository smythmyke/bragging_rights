rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Boxing collections - PUBLIC READ for cached data
    match /boxing_cache/{document=**} {
      allow read: if true;  // Public read for cache metadata
      allow write: if false; // Only Cloud Functions can write
    }

    match /boxing_events/{eventId} {
      allow read: if true;  // Public read for cached events
      allow write: if false; // Only Cloud Functions can write
    }

    match /boxing_fights/{fightId} {
      allow read: if true;  // Public read for cached fights
      allow write: if false; // Only Cloud Functions can write
    }

    match /boxing_fighters/{fighterId} {
      allow read: if true;  // Public read for cached fighters
      allow write: if false; // Only Cloud Functions can write
    }

    match /boxing_activity_log/{logId} {
      allow read: if isAdmin();  // Only admins can view logs
      allow write: if false;      // Only Cloud Functions can write
    }

    match /boxing_errors/{errorId} {
      allow read: if isAdmin();  // Only admins can view errors
      allow write: if false;      // Only Cloud Functions can write
    }

    // MMA collections - PUBLIC READ for cached data
    match /mma_cache/{document=**} {
      allow read: if true;  // Public read for cache metadata
      allow write: if true;  // Allow public writes for caching
    }

    match /mma_events/{eventId} {
      allow read: if true;  // Public read for cached events
      allow write: if true;  // Allow public writes for caching
    }

    match /mma_fighters/{fighterId} {
      allow read: if true;  // Public read for cached fighters
      allow write: if true;  // Allow public writes for caching
    }

    match /fighter_images/{fighterId} {
      allow read: if true;  // Public read for fighter images
      allow write: if true;  // Allow public writes for caching
    }

    match /fighter_images_cache/{fighterId} {
      allow read: if true;  // Public read for cached fighter images
      allow write: if true;  // Allow public writes for image caching
    }



    // Game cache metadata - allow public writes for caching
    match /game_cache_meta/{document=**} {
      allow read: if true;
      allow write: if true;  // Allow public writes for cache metadata
    }

    // User wallet subcollection - allow read/write for wallet operations
    match /users/{userId}/wallet/{document=**} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if false; // Wallet documents cannot be deleted
    }

    // User cards subcollection
    match /users/{userId}/cards/{document=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // User pools subcollection
    match /users/{userId}/pools/{document=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // User games with bets subcollection
    match /users/{userId}/gamesWithBets/{document=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // User preferences collection
    match /userPreferences/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Edge cache for API responses
    match /edge_cache/{document=**} {
      allow read: if true;
      allow write: if true;  // Allow public writes for caching
    }

    // User pools collection - tracks user participation in pools
    match /user_pools/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Other collections (existing rules)
    match /pools/{poolId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        (resource.data.creator == request.auth.uid ||
         resource.data.createdBy == request.auth.uid ||
         request.auth.uid in resource.data.get('members', []) ||
         request.auth.uid in resource.data.get('playerIds', []) ||
         // Allow any authenticated user to cancel/update empty pools
         resource.data.get('members', []).size() == 0 ||
         resource.data.get('playerIds', []).size() == 0 ||
         // Allow any authenticated user to update empty pools past close time
         (resource.data.get('playerIds', []).size() == 0 && resource.data.closeTime < request.time));
      allow delete: if isAuthenticated() &&
        (resource.data.get('creator', '') == request.auth.uid ||
         resource.data.get('createdBy', '') == request.auth.uid ||
         // Allow any authenticated user to delete cancelled pools
         resource.data.status == 'cancelled' ||
         // Allow deletion of empty pools (checking both possible field names)
         resource.data.get('members', []).size() == 0 ||
         resource.data.get('playerIds', []).size() == 0 ||
         // Allow deletion of pools past close time with no players
         (resource.data.get('playerIds', []).size() == 0 && resource.data.closeTime < request.time));
    }

    match /bets/{betId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId) &&
        resource.data.status == 'pending';
      allow delete: if false; // Bets cannot be deleted
    }

    match /games/{gameId} {
      allow read: if true;  // Public read for games
      allow write: if true;  // Allow public writes for ESPN ID updates and cache
    }

    // ESPN ID mappings - allow public read and write for caching
    match /id_mappings/{document=**} {
      allow read: if true;
      allow write: if true;  // Allow public writes for ID caching
    }

    match /wallets/{walletId} {
      allow read: if isOwner(walletId) || isAuthenticated();
      allow create: if isOwner(walletId);
      allow update: if isOwner(walletId) || isAdmin();
      allow delete: if false; // Wallets cannot be deleted
    }

    // Wallet transactions subcollection
    match /wallets/{walletId}/transactions/{transactionId} {
      allow read: if isOwner(walletId) || isAdmin();
      allow create: if isOwner(walletId) || isAdmin();
      allow update: if isAdmin();
      allow delete: if false; // Transactions cannot be deleted
    }

    match /transactions/{transactionId} {
      allow read: if isAuthenticated() &&
        (resource.data.fromUserId == request.auth.uid ||
         resource.data.toUserId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if false;
      allow delete: if false; // Transactions cannot be deleted
    }
  }
}