rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read/write their own user documents
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read all pools, write with conditions
    match /pools/{poolId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if false; // Only admin can delete pools
    }
    
    // Allow authenticated users to read/write user_pools
    match /user_pools/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Allow authenticated users to read games, only backend writes
    match /games/{gameId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admin/backend should write
    }
    
    // Allow authenticated users to read/write their wallets
    match /wallets/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read/write bets
    match /bets/{betId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.participants[request.auth.uid] == true);
      allow delete: if false; // No deletion of bets
    }
    
    // Allow authenticated users to read/write their transactions
    match /transactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.fromUserId == request.auth.uid || 
         resource.data.toUserId == request.auth.uid);
      allow create: if request.auth != null;
      allow update: if false; // Transactions are immutable
      allow delete: if false; // No deletion of transactions
    }
    
    // Allow authenticated users to read/write wagers
    match /wagers/{wagerId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.opponentId == request.auth.uid);
      allow delete: if false; // No deletion of wagers
    }
    
    // Allow authenticated users to read odds (cached data)
    match /odds/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Only backend updates odds
    }
  }
}